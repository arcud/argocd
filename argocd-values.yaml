## Argo Configs
configs:
  # ConfigMap for Config Management Plugins
  # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/
  cmp:
    # -- Create the argocd-cmp-cm configmap
    create: true
    # -- Annotations to be added to argocd-cmp-cm configmap
    annotations:
      company: microhard
      market-cap: "$1 trillion"
    # -- Plugin yaml files to be added to argocd-cmp-cm
    plugins:
      microhard-app-cmp:
        # The version of your plugin. Optional. If specified, the Application's spec.source.plugin.name field
        # must be <plugin name>-<plugin version>.
        version: v666.69.420
        # The init command runs in the Application source directory at the beginning of each manifest generation. The init
        # command can output anything. A non-zero status code will fail manifest generation.
        init:
          # Init always happens immediately before generate, but its output is not treated as manifests.
          # This is a good place to, for example, download chart dependencies.
          command: [sh]
          args: [-c, 'echo "Initializing the microhard app CMP ðŸ”Œ..."']
        # The 'generate' command runs in the Application source directory (aka repo's root directory) each time manifests are generated.
        # Standard output (stdout) must be ONLY valid Kubernetes Objects in either YAML or JSON.
        # A non-zero exit code will fail manifest generation.
        # To write log messages from the command, write them to stderr, it will always be displayed.
        # Error output will be sent to the UI, so avoid printing sensitive information (such as secrets).
        generate:
          command: [ "sh", "-c" ]
          args:
            - sed "s/REPLACE_ME_DADDY/2000/g" microhard-manifests/values.yaml
        # The parameters config describes what parameters the UI should display for an Application.
        # It is up to the user to actually set parameters in the Application manifest (in 'spec.source.plugin.parameters').
        # The announcements ONLY inform the "Parameters" tab in the App Details page of the UI.
        parameters:
          # Static parameter announcements are sent to the UI for ALL Applications handled by this plugin.
          # Think of the `string`, `array`, and `map` values set here as "defaults". It is up to the plugin author to make
          # sure that these default values actually reflect the plugin's behavior if the user doesn't explicitly set different
          # values for those parameters.
          static:
            - name: managed-by-which-cmp
              title: Which CMP manages this Application?
              tooltip: Shows which config management plugin manages this Application
              # This field communicates the parameter's default value to the UI. Setting this field is optional.
              string: microhard-app-cmp
      microhard-alerts-and-dashboards-cmp:
        version: v100.0.9000
        generate:
          command: [ "sh", "-c" ]
          args:
            - |
              export XDG_CACHE_HOME=/tmp/.cache;
              export HELM_CONFIG_HOME="/tmp/.config";
              export HELM_DATA_HOME="/tmp/.data";
              sed -i "s/Windows/Doors/g" microhard-manifests/dashboards/values.integration.yaml;
              helm repo add cloudecho https://cloudecho.github.io/charts/ 2>&1 > /dev/null;
              helm repo update 2>&1 > /dev/null;
              helm template hello cloudecho/hello \
                --version=0.1.2 -f microhard-manifests/dashboards/values.yaml \
                -f microhard-manifests/dashboards/values.integration.yaml

## Repo Server
repoServer:
  # -- Additional containers to be added to the repo server pod
  ## Ref: https://argo-cd.readthedocs.io/en/stable/user-guide/config-management-plugins/
  ## Note: Supports use of custom Helm templates
  extraContainers:
    - name: microhard-app-cmp
      # Entrypoint should be Argo CD lightweight CMP server i.e. argocd-cmp-server
      command: [/var/run/argocd/argocd-cmp-server]
      # This can be off-the-shelf or custom-built image
      image: busybox:stable
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        # Remove this volumeMount if you've chosen to bake the config file into the sidecar image.
        - mountPath: /home/argocd/cmp-server/config/
          name: microhard-app-cmp-configmap-volume
        # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps
        # mitigate path traversal attacks.
        - mountPath: /tmp
          name: cmp-tmp
    - name: microhard-alerts-and-dashboards-cmp
      # Entrypoint should be Argo CD lightweight CMP server i.e. argocd-cmp-server
      command: [/var/run/argocd/argocd-cmp-server]
      # This can be off-the-shelf or custom-built image
      image: alpine/helm:3.14.3
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        # Remove this volumeMount if you've chosen to bake the config file into the sidecar image.
        - mountPath: /home/argocd/cmp-server/config/
          name: microhard-alerts-and-dashboards-cmp-config-volume
        # Starting with v2.4, do NOT mount the same tmp volume as the repo-server container. The filesystem separation helps
        # mitigate path traversal attacks.
        - mountPath: /tmp
          name: cmp-tmp

  # -- Additional volumes to the repo server pod
  volumes:
   - name: microhard-app-cmp-configmap-volume
     configMap:
       name: argocd-cmp-cm
       items:
        - key: microhard-app-cmp.yaml
          path: plugin.yaml
   - name: microhard-alerts-and-dashboards-cmp-config-volume
     configMap:
       name: argocd-cmp-cm
       items:
        - key: microhard-alerts-and-dashboards-cmp.yaml
          path: plugin.yaml
   - name: cmp-tmp
     emptyDir: {}
